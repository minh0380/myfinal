<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- thread safe하다면 bean으로 등록해 사용하고, 아니라면 스프링 안에서 메서드 내에서 의존성을 주입해준다. -->
	<beans:bean id="SimpleClientHttpRequestFactory" 
		class="org.springframework.http.client.SimpleClientHttpRequestFactory">
		<beans:property name="connectTimeout" value="5000"/>
		<beans:property name="readTimeout" value="5000"/>
	</beans:bean>
	
	<beans:bean class="org.springframework.web.client.RestTemplate">
		<beans:constructor-arg name="requestFactory" ref="SimpleClientHttpRequestFactory"/>
	</beans:bean>
	
	<beans:bean class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	<!-- scheduled annotation -->
	<task:annotation-driven/>
	
	<interceptors>
		<interceptor>
			<!-- url 패턴 -->
			<mapping path="/**"/>
			<beans:bean class="com.kh.aboo.common.interceptor.AuthInterceptor"/>
		</interceptor>
	</interceptors>
	
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:constructor-arg name="dataSource" ref="dataSource"/>
	</beans:bean>
	
	<!-- @Transactional 사용 시 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 트랜잭션을 지정하기 위한 메서드 네임패턴과 transaction 정책 -->
			<tx:method name="select*" read-only="true"/>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="java.lang.Exception"/> <!-- propagation : 트랜잭션이 충돌됐을 때 정책, rollback-for : 롤백시킬 예외 등록, java.lang.Exception은 그냥 Exception이라고 써도 됨 -->
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<!-- .. : 하위의 모든 패키지를 포함(모든 depth)
			com.kh.toy.*로 하면 그 바로 아래 패키지만 포함. -->
		<aop:pointcut expression="execution(* com.kh.toy..*.*ServiceImpl.*(..))" id="txPointCut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
	</aop:config>
	
	<context:component-scan base-package="com.kh.toy, com.kh.aboo" />
</beans:beans>
